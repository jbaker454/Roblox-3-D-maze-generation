local Maze = {}

local ServerStorage = game:GetService("ServerStorage")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Chunk = require(ServerStorage:WaitForChild("ChunkGenerator"))

local ProgressBarSetter = require(ReplicatedStorage:WaitForChild("ProgressBarSetter"))

local unitVectors = {Vector3.new(1, 0, 0),Vector3.new(0, 1, 0),Vector3.new(0, 0, 1),
	Vector3.new(-1, 0, 0),Vector3.new(0, -1, 0),Vector3.new(0, 0, -1)}

local function compareVector3(vector3A:Vector3,vector3B:Vector3):boolean
	if vector3A.X == vector3B.X and vector3A.Y == vector3B.Y and vector3A.Z == vector3B.Z then
		return true
	end
	return false
end

local function checkFor0Vector3(vector3A:Vector3):boolean
	return compareVector3(vector3A,Vector3.new(0,0,0))
end

local function getMagnitudeWithNegatives(vector3A:Vector3):number
	if vector3A.X < 0 or vector3A.Y < 0 or vector3A.Z < 0 then
		return (vector3A.Magnitude * -1)
	end
	return vector3A.Magnitude
end

local function determineMaxPathSizeByMazeSize(
	 vector3Direction:Vector3,
	 mazeHeadPosition:Vector3,
	 mazeSize:Vector3,
	 maxTunnelLength:IntValue
):IntValue
	local vector3DirectionAbs = Vector3.new().Abs(vector3Direction)
	local vector3DirectionMagnitude = getMagnitudeWithNegatives(vector3Direction)
	
	local mazeHeadPositionVector = mazeHeadPosition * vector3DirectionAbs
	local mazeHeadPositionVectorMagnitude = mazeHeadPositionVector.Magnitude
	
	local mazeSizeVector = mazeSize * vector3DirectionAbs
	local mazeSizeVectorMagnitude = mazeSizeVector.Magnitude
	
	if vector3DirectionMagnitude == 1 then
		return math.min(mazeSizeVectorMagnitude - (mazeHeadPositionVectorMagnitude + 1),maxTunnelLength)
	elseif vector3DirectionMagnitude == -1 then
		return math.max(-mazeHeadPositionVectorMagnitude,-maxTunnelLength)
	else
		return 0
	end
end

local function determineMaxPathSizeByTakenPositions(
	mazeHeadPosition:Vector3,
	vector3DirectionAbs:Vector3,
	maxPossiblePathDistance:IntValue,
	takenPositions:any
):IntValue
	local direction = 1
	local vector3Direction = vector3DirectionAbs
	if maxPossiblePathDistance < 0 then
		direction = -1
		vector3Direction = vector3DirectionAbs * -1
	end
	
	local testPosition = mazeHeadPosition
	local testDistance = direction
	while math.abs(testDistance) <= math.abs(maxPossiblePathDistance) do
		testPosition += vector3Direction
		local x,y,z,i = Chunk.findTargetPosition(testPosition,takenPositions)
		if not (i == nil) then
			maxPossiblePathDistance = testDistance - direction
			break
		end
		testDistance += direction
	end
	
	return maxPossiblePathDistance
end

local function randomizePathLength(maxPossiblePathDistance:IntValue,vector3DirectionAbs:Vector3):Vector3
	local possiblePathMagnitude = maxPossiblePathDistance
	if maxPossiblePathDistance > 0 then
		possiblePathMagnitude = math.random(1,maxPossiblePathDistance)
	elseif maxPossiblePathDistance < 0 then
		possiblePathMagnitude = math.random(maxPossiblePathDistance,-1)
	end
	return (vector3DirectionAbs * possiblePathMagnitude)
end

local function findPossibleVector3Path(
	mazeHeadPosition:Vector3,
	takenPositions:any,
	vector3Direction:Vector3,
	mazeSize:Vector3,
	maxTunnelLength:IntValue
):Vector3
	local vector3DirectionAbs = Vector3.new().Abs(vector3Direction)
	
	local maxPossiblePathDistance = determineMaxPathSizeByMazeSize(vector3Direction,mazeHeadPosition,mazeSize,maxTunnelLength)
	
	if not (maxPossiblePathDistance == 0) then
		maxPossiblePathDistance = determineMaxPathSizeByTakenPositions(mazeHeadPosition,vector3DirectionAbs,maxPossiblePathDistance,takenPositions)
	end
	
	if not (maxPossiblePathDistance == 0) then
		return randomizePathLength(maxPossiblePathDistance,vector3DirectionAbs)
	else
		return Vector3.new(0,0,0)
	end
end

local function findPossibleVector3Paths(
	mazeHeadPosition:Vector3,
	takenPositions:any,
	mazeSize:Vector3,
	maxTunnelLength:IntValue
):{Vector3}
	local possiblePaths = {}
	for _,unitVector in pairs(unitVectors) do
		local possiblePath = findPossibleVector3Path(mazeHeadPosition,takenPositions,unitVector,mazeSize,maxTunnelLength)
		table.insert(possiblePaths,possiblePath)
	end
	return possiblePaths
end

local function determinePaths(possiblePaths:{Vector3}):{Vector3}
	local pathsPossibleNumber = 0
	for _,possiblePath in pairs(possiblePaths) do
		if not checkFor0Vector3(possiblePath) then
			pathsPossibleNumber += 1
		end
	end
	
	local determinedPaths = {}
	if pathsPossibleNumber >= 2 then
		local pathsleft = math.random(1,pathsPossibleNumber)

		for _,possiblePath in pairs(possiblePaths) do
			if not checkFor0Vector3(possiblePath) then
				if math.random(1,pathsPossibleNumber) <= (pathsleft) then
					table.insert(determinedPaths,possiblePath)
					pathsleft -= 1
				else
					table.insert(determinedPaths,Vector3.new(0,0,0))
				end
				pathsPossibleNumber -= 1
			else
				table.insert(determinedPaths,Vector3.new(0,0,0))
			end
		end
	else
		determinedPaths = possiblePaths
	end
	return determinedPaths
end

local function createPath(possiblePath:Vector3,mazeHeadPosition:Vector3):any
	local newPathPositions = {{mazeHeadPosition + possiblePath,possiblePath.Unit}}
	local pathLength = possiblePath.magnitude
	for i = 1, pathLength - 1 do
		possiblePath = possiblePath - possiblePath.unit
		table.insert(newPathPositions,{mazeHeadPosition + possiblePath,Vector3.new(0,0,0)})
	end
	return newPathPositions
end

local function createWallPositions(mazePosition:Vector3,unitVector:Vector3,tunnelSize:IntValue):{Vector3}
	local wallPositions = {}
	local otherUnitVector = Vector3.new().Abs(Vector3.new().Abs(unitVector) + Vector3.new(-1,-1,-1))
	for i = 1, tunnelSize do
		for j = 1, tunnelSize do
			local blockTunnelPosition = (mazePosition * (tunnelSize + 1))
			
			local x,y,z
			if unitVector.X == 1 then
				x = tunnelSize + 1;y = i;z = j;
			elseif unitVector.Y == 1 then
				x = i;y = tunnelSize + 1;z = j;
			elseif unitVector.Z == 1 then
				x = i;y = j;z = tunnelSize + 1;
			elseif unitVector.X == -1 then
				x = 0;y = i;z = j;
			elseif unitVector.Y == -1 then
				x = i;y = 0;z = j;
			elseif unitVector.Z == -1 then
				x = i;y = j;z = 0;
			end
			local specificWallPlacement = Vector3.new(x,y,z)
			
			local blockPosition = blockTunnelPosition + specificWallPlacement
			table.insert(wallPositions,blockPosition)
		end
	end
	return wallPositions
end

local function createBlockPositionsAlongPath(possiblePath:Vector3,mazeHeadPosition:Vector3,tunnelSize:IntValue):{Vector3}
	local newBlockPositions = {}
	local vector3Direction = possiblePath.Unit
	for i = 1, possiblePath.Magnitude - 1 do
		local tunnelposition = mazeHeadPosition + possiblePath - (vector3Direction * i)
		for _,unitVector in pairs(unitVectors) do
			if not compareVector3(Vector3.new().Abs(unitVector),Vector3.new().Abs(vector3Direction)) then
				local possibleBlockPositions = createWallPositions(tunnelposition,unitVector,tunnelSize)
				for _,blockPosition in pairs(possibleBlockPositions) do
					table.insert(newBlockPositions,blockPosition)
				end
			end
		end
	end
	return newBlockPositions
end

local function findNumbersNotInArray(array:{IntValue},startIntiger:IntValue,endIntiger:IntValue):{IntValue}
	local invertedArray = {}
	for i = startIntiger,endIntiger do
		local numberNotFound = true
		for _,number in pairs(array) do
			if i == number then
				numberNotFound = false
			end
		end
		if numberNotFound then
			table.insert(invertedArray,i)
		end
	end
	return invertedArray
end

local function createBlockPositionsAtMazeHeadPosition(
	pathsTaken:{IntValue},
	mazeHeadPosition:Vector3,
	tunnelSize:IntValue,
	takenPositions:any,
	mazeLoopChance:IntValue
):{IntValue}
	local newBlockPositions = {}
	local pathsNotTaken = findNumbersNotInArray(pathsTaken,1,6)
	for _,pathNotTaken in pairs(pathsNotTaken) do
		local placeWall = true

		local unitVector = unitVectors[pathNotTaken]
		local adjacentPosition = mazeHeadPosition + unitVector
		
		if Chunk.checkIfInsideMaze(adjacentPosition,takenPositions) then
			local x,y,z,i = Chunk.findTargetPosition(adjacentPosition,takenPositions)
			if not (i == nil) then
				local adjacentPosition = takenPositions[x][y][z][i]
				if not checkFor0Vector3(adjacentPosition[2]) and not (math.random(1,100) <= mazeLoopChance) then
					placeWall = true
				else
					placeWall = false
				end
			end
		end
		
		if placeWall then
			local possibleBlockPositions = createWallPositions(mazeHeadPosition,unitVectors[pathNotTaken],tunnelSize)
			for _,blockPosition in pairs(possibleBlockPositions) do
				table.insert(newBlockPositions,blockPosition)
			end 
		end
	end
	return newBlockPositions
end

local function findNewMazeHeadPosition(takenPositions:any):Vector3?
	local validPositions = {}
	for _,yzPlane in pairs(takenPositions) do
		for _,zAxis in pairs(yzPlane) do
			for _,chunk in pairs(zAxis) do
				for _,position in pairs(chunk) do
					if not checkFor0Vector3(position[2]) then
						table.insert(validPositions,position[1]) 
					end
				end
			end
		end
	end
	if #validPositions == 0 then
		return nil
	else
		return validPositions[math.random(1,#validPositions)]
	end
end
		


local function generateCornerPositions(mazeSize:Vector3, tunnelSize:IntValue):{Vector3}
	local cornerPositions = {}
	for x = 0, mazeSize.X do
		for y = 0, mazeSize.Y do
			for z = 0, mazeSize.Z do
				local cornerPosition = Vector3.new(x * (tunnelSize + 1),y * (tunnelSize + 1),z * (tunnelSize + 1))
				table.insert(cornerPositions,cornerPosition)
			end
		end
	end
	return cornerPositions
end

local function generateVerticePositions(mazeSize:Vector3, tunnelSize:IntValue):{Vector3}
	local verticePositions = {}
	for x = 0, mazeSize.X do
		wait(0.001)
		for y = 0, mazeSize.Y do
			for z = 0, mazeSize.Z do
				for i = 1, tunnelSize do
					if not (x == mazeSize.X) then
						local verticePosition = Vector3.new(x * (tunnelSize + 1) + i,y * (tunnelSize + 1),z * (tunnelSize + 1))
						table.insert(verticePositions,verticePosition)
					end
					if not (y == mazeSize.Y) then
						local verticePosition = Vector3.new(x * (tunnelSize + 1),y * (tunnelSize + 1) + i,z * (tunnelSize + 1))
						table.insert(verticePositions,verticePosition)
					end
					if not (z == mazeSize.Z) then
						local verticePosition = Vector3.new(x * (tunnelSize + 1),y * (tunnelSize + 1),z * (tunnelSize + 1) + i)
						table.insert(verticePositions,verticePosition)
					end
				end
			end
		end
	end
	return verticePositions
end

local function createBlockGridPositions(mazeSize:Vector3, tunnelSize:IntValue, ProgressBarSetter:ModuleScript):{Vector3}
	local loadingMessage = "Generating grid..."
	local incrementAmount = 1 / 2
	ProgressBarSetter.SetProgressBar(loadingMessage,incrementAmount)
	
	local blockPositions = {}
	
	local cornerPositions = generateCornerPositions(mazeSize, tunnelSize)
	for _,cornerPosition in cornerPositions do
		table.insert(blockPositions,cornerPosition)
	end
	ProgressBarSetter.IncrementProgressBar()
	
	local verticePositions = generateVerticePositions(mazeSize, tunnelSize)
	for _,verticePosition in verticePositions do
		table.insert(blockPositions,verticePosition)
	end
	ProgressBarSetter.IncrementProgressBar()
	
	return blockPositions
end

function Maze.generateMaze(
	mazeSize:Vector3,
	tunnelSize:IntValue,
	mazeLoopChance:IntValue,
	maxTunnelLength:IntValue
):any
	local blockGridPositions = createBlockGridPositions(mazeSize, tunnelSize,ProgressBarSetter)
	
	local blockPositions = Chunk.generateChunks(mazeSize,tunnelSize,blockGridPositions)
	
	local loadingMessage = "Generating Maze..."
	local incrementAmount = 1 / (mazeSize.X * mazeSize.Y * mazeSize.Z)
	ProgressBarSetter.SetProgressBar(loadingMessage,incrementAmount)
	
	local takenPositions = Chunk.generateChunks(mazeSize,0,{})
	local mazeHeadPosition = Vector3.new(0, 0, 0)
	table.insert(takenPositions[1][1][1],{mazeHeadPosition,mazeHeadPosition})
	ProgressBarSetter.IncrementProgressBar()
	
	while true do
		wait(0.001)
		local possiblePaths = findPossibleVector3Paths(mazeHeadPosition,takenPositions,mazeSize,maxTunnelLength)
		local paths = determinePaths(possiblePaths)
		local pathsTaken = {}
		local counter = 1
		for _,path in pairs(paths) do
			if not checkFor0Vector3(path) then
				local newPathPositions = createPath(path,mazeHeadPosition)
				for _,newPathPosition in newPathPositions do
					ProgressBarSetter.IncrementProgressBar()
					local x,y,z,i = Chunk.findTargetPosition(newPathPosition[1],takenPositions)
					table.insert(takenPositions[x][y][z],newPathPosition)
				end
				table.insert(pathsTaken,counter)
				
				local newBlockPositions = createBlockPositionsAlongPath(path,mazeHeadPosition,tunnelSize)
				for _,newBlockPosition in newBlockPositions do
					local x,y,z,i = Chunk.findTargetPosition(newBlockPosition,blockPositions)
					if i == nil then
						table.insert(blockPositions[x][y][z],{newBlockPosition})
					end
				end
			end
			counter += 1
		end
		
		local newBlockPositions = createBlockPositionsAtMazeHeadPosition(pathsTaken,mazeHeadPosition,tunnelSize,takenPositions,mazeLoopChance)
		for _,newBlockPosition in newBlockPositions do
			local x,y,z,i = Chunk.findTargetPosition(newBlockPosition,blockPositions)
			if i == nil then
				table.insert(blockPositions[x][y][z],{newBlockPosition})
			end
		end
		
		local x,y,z,i = Chunk.findTargetPosition(mazeHeadPosition,takenPositions)
		if not (i == nil) then
			table.remove(takenPositions[x][y][z][i],2)
			table.insert(takenPositions[x][y][z][i],Vector3.new(0,0,0))
		end

		mazeHeadPosition = findNewMazeHeadPosition(takenPositions)
		if mazeHeadPosition == nil then
			break
		end
	end
	
	return blockPositions
end

return Maze
